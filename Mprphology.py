# -*- coding: utf-8 -*-
"""ImageAndVideoLAb9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yHoxK1uJuTDo_qXfDsY9yqjGgNswBARX
"""

pip install opencv-contrib-python

"""## ***Learn Erosion , Dilation and Morphological Gradient in the image***

### Apply morphological operations on the image

### 1. Erosion
"""

import cv2
from google.colab.patches import cv2_imshow  # For displaying images in Colab

# Load the image, convert it to grayscale, and display it to our screen
image = cv2.imread("/content/drive/MyDrive/00IMAGEandVIDEOprocessing/pyImage.png")
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
cv2_imshow(image)  # Use cv2_imshow instead of cv2.imshow for displaying in Colab

# Apply a series of erosions
for i in range(0, 3):
    eroded = cv2.erode(gray.copy(), None, iterations=i + 1)
    cv2_imshow(eroded)
# cv2.waitKey(0)

"""### 2. Dilation"""

import cv2
from google.colab.patches import cv2_imshow  # For displaying images in Colab

# # Load the image, convert it to grayscale, and display it to our screen
image = cv2.imread("/content/drive/MyDrive/00IMAGEandVIDEOprocessing/pyImage.png")
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
cv2_imshow(image)

# apply a series of dilations
for i in range(0, 3):
	dilated = cv2.dilate(gray.copy(), None, iterations=i + 1)
	cv2_imshow(dilated)

"""## ***Apply some noise on the previous image by creating blobs on it. Then apply following operations on the noisy image:***

### **1. Opening**
An opening is an erosion followed by a dilation.
"""

import cv2
from google.colab.patches import cv2_imshow  # For displaying images in Colab

# # Load the image, convert it to grayscale, and display it to our screen
image = cv2.imread("/content/drive/MyDrive/00IMAGEandVIDEOprocessing/blob.png")
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
cv2_imshow(image)

kernelSizes = [(3, 3), (5, 5), (7, 7)]
# loop over the kernels sizes
for kernelSize in kernelSizes:
	# construct a rectangular kernel from the current size and then
	# apply an "opening" operation
	kernel = cv2.getStructuringElement(cv2.MORPH_RECT, kernelSize)
	opening = cv2.morphologyEx(gray, cv2.MORPH_OPEN, kernel)
	cv2_imshow(opening)
	cv2.waitKey(0)

"""### **2. Closing**
The exact opposite to an opening would be a closing. A closing is a dilation followed by an erosion.



"""

import cv2
from google.colab.patches import cv2_imshow  # For displaying images in Colab

# # Load the image, convert it to grayscale, and display it to our screen
image = cv2.imread("/content/drive/MyDrive/00IMAGEandVIDEOprocessing/pyImage.png")
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
cv2_imshow(image)

for kernelSize in kernelSizes:
	# construct a rectangular kernel form the current size, but this
	# time apply a "closing" operation
	kernel = cv2.getStructuringElement(cv2.MORPH_RECT, kernelSize)
	closing = cv2.morphologyEx(gray, cv2.MORPH_CLOSE, kernel)
	cv2_imshow(closing)
	cv2.waitKey(0)

"""### **3. Morphological gradient**
A morphological gradient is the difference between a dilation and erosion.



"""

import cv2
from google.colab.patches import cv2_imshow  # For displaying images in Colab

# # Load the image, convert it to grayscale, and display it to our screen
image = cv2.imread("/content/drive/MyDrive/00IMAGEandVIDEOprocessing/pyImage.png")
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
cv2_imshow(image)

for kernelSize in kernelSizes:
	# construct a rectangular kernel and apply a "morphological
	# gradient" operation to the image
	kernel = cv2.getStructuringElement(cv2.MORPH_RECT, kernelSize)
	gradient = cv2.morphologyEx(gray, cv2.MORPH_GRADIENT, kernel)
	cv2_imshow(gradient)
	cv2.waitKey(0)

"""### **4. Top hat/white hat and black hat**
A top hat (also known as a white hat) morphological operation is the difference between the original (grayscale/single channel) input image and the opening.

A top hat operation is used to reveal bright regions of an image on dark backgrounds.



"""

import cv2
from google.colab.patches import cv2_imshow  # For displaying images in Colab

# # Load the image, convert it to grayscale, and display it to our screen
image = cv2.imread("/content/drive/MyDrive/00IMAGEandVIDEOprocessing/opencv_morphological_ops_car.webp")
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
cv2_imshow(image)

# construct a rectangular kernel (13x5) and apply a blackhat
# operation which enables us to find dark regions on a light
# background
rectKernel = cv2.getStructuringElement(cv2.MORPH_RECT, (13, 5))
blackhat = cv2.morphologyEx(gray, cv2.MORPH_BLACKHAT, rectKernel)
# similarly, a tophat (also called a "whitehat") operation will
# enable us to find light regions on a dark background
tophat = cv2.morphologyEx(gray, cv2.MORPH_TOPHAT, rectKernel)
# show the output images
print("")
print("Blackhat: Applying a black hat operation reveals dark regions on a light background.")
cv2_imshow(blackhat)
print("")
print("Tophat: Applying a top hat operation reveals light regions on a dark background.")
cv2_imshow(tophat)